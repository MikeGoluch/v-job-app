{"version":3,"sources":["containers/Checkboxes/Checkbox/Checkbox.module.css","App.module.css","components/Locations/Location/Location.module.css","containers/Checkboxes/Checkboxes.module.css","components/Jobs/Job/Job.module.css","components/UI/Button/Button.module.css","components/Locations/Location/Location.js","containers/Checkboxes/Checkbox/Checkbox.js","components/UI/Button/Button.js","components/Jobs/Job/Job.js","components/Jobs/Jobs.js","containers/Checkboxes/Checkboxes.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","location","props","addedClass","classes","Occurrence","occurrences","None","className","Location","checkbox","Container","Checkbox","join","type","name","locations","onChange","checked","Input","Checkmark","Button","onClick","clicked","children","Job","useState","isShown","setIsShown","onMouseEnter","onMouseLeave","job","jobs","displayJobResults","results","resultsLimit","start","end","limitedResults","slice","filtered","length","newResults","filter","result","includes","undefined","filterResults","map","el","key","id","Checkboxes","state","checkedItems","filteredItems","onChangeHandler","e","target","setState","prevState","newItems","Object","keys","checkboxes","entries","this","occurrence","Jobs","data","Component","App","countOccurrences","array","reduce","acc","curr","newArr","push","Last1","Last2","Background","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.5be1f0cd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"Checkbox\":\"Checkbox_Checkbox__2Tc9j\",\"Container\":\"Checkbox_Container__HBk4M\",\"Input\":\"Checkbox_Input__389yh\",\"Checkmark\":\"Checkbox_Checkmark__lwofA\",\"None\":\"Checkbox_None__3pMh5\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"App_Container__3ED1d\",\"Checkboxes\":\"App_Checkboxes__1xq5h\",\"Background\":\"App_Background__3MSqU\",\"Last1\":\"App_Last1__1H2OC\",\"Last2\":\"App_Last2__TcnlY\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Location\":\"Location_Location__3hTqw\",\"Occurrence\":\"Location_Occurrence__385xN\",\"None\":\"Location_None__3euGB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Container\":\"Checkboxes_Container__28VUN\",\"Checkboxes\":\"Checkboxes_Checkboxes__VFSHt\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Job\":\"Job_Job__27bYX\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Button\":\"Button_Button__1Gbe8\"};","import React from \"react\";\r\nimport classes from \"./Location.module.css\";\r\n\r\nconst location = (props) => {\r\n  let addedClass = classes.Occurrence;\r\n  if (props.occurrences === 0) {\r\n    addedClass = classes.None;\r\n  }\r\n  return (\r\n    <div className={classes.Location}>\r\n      <span className={addedClass}>{props.occurrences}</span>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default location;\r\n","import React from \"react\";\r\nimport classes from \"./Checkbox.module.css\";\r\nimport Location from \"../../../components/Locations/Location/Location\";\r\n\r\nconst checkbox = (props) => {\r\n  let addedClass = [classes.Container];\r\n  if (props.occurrences === 0) {\r\n    addedClass = [classes.Container, classes.None];\r\n  }\r\n  return (\r\n    <div className={classes.Checkbox}>\r\n      <label className={addedClass.join(\" \")}>\r\n        <input\r\n          type=\"checkbox\"\r\n          name={props.locations}\r\n          onChange={props.checked}\r\n          className={classes.Input}\r\n        />\r\n        <span className={classes.Checkmark}></span>\r\n        {props.locations}\r\n      </label>\r\n      <Location occurrences={props.occurrences} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default checkbox;\r\n","import React from \"react\";\r\nimport classes from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n  return (\r\n    <button className={classes.Button} onClick={props.clicked}>\r\n      {props.children}\r\n    </button>\r\n  );\r\n};\r\n\r\nexport default Button;\r\n","import React, { useState } from \"react\";\r\nimport classes from \"./Job.module.css\";\r\nimport Button from \"../../UI/Button/Button\";\r\n\r\nconst Job = (props) => {\r\n  const [isShown, setIsShown] = useState(false);\r\n  return (\r\n    <div\r\n      className={classes.Job}\r\n      onMouseEnter={() => setIsShown(true)}\r\n      onMouseLeave={() => setIsShown(false)}\r\n    >\r\n      <p>{props.job}</p>\r\n      {isShown && <Button>Apply</Button>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Job;\r\n","import React from \"react\";\r\nimport Job from \"./Job/Job\";\r\n\r\nconst jobs = (props) => {\r\n  const displayJobResults = (results, resultsLimit = 7) => {\r\n    const start = 0;\r\n    const end = resultsLimit;\r\n    const limitedResults = results.slice(start, end);\r\n    return limitedResults;\r\n  };\r\n  const filterResults = (filtered, results) => {\r\n    const newResults = results.filter((result) => {\r\n      return filtered.includes(result.location);\r\n    });\r\n    return displayJobResults(newResults, undefined);\r\n  };\r\n  return (\r\n    <div>\r\n      {props.filtered.length > 0\r\n        ? filterResults(props.filtered, props.jobs).map((el) => (\r\n            <Job key={el.id} job={el.job} />\r\n          ))\r\n        : displayJobResults(props.jobs, undefined).map((el) => (\r\n            <Job key={el.id} job={el.job} />\r\n          ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default jobs;\r\n","import React, { Component } from \"react\";\r\nimport classes from \"./Checkboxes.module.css\";\r\nimport Checkbox from \"./Checkbox/Checkbox\";\r\nimport Jobs from \"../../components/Jobs/Jobs\";\r\n\r\nclass Checkboxes extends Component {\r\n  state = {\r\n    checkedItems: {},\r\n    filteredItems: {},\r\n  };\r\n\r\n  onChangeHandler = (e) => {\r\n    const name = e.target.name;\r\n    const checked = e.target.checked;\r\n    this.setState((prevState) => {\r\n      const newItems = { ...this.state.checkedItems, [name]: checked };\r\n      const filterByLocation = Object.keys(newItems).filter(\r\n        (el) => newItems[el]\r\n      );\r\n      return { filteredItems: filterByLocation, checkedItems: newItems };\r\n    });\r\n  };\r\n  render() {\r\n    const checkboxes = Object.entries(this.props.occurrences).map(\r\n      ([location, occurrence]) => {\r\n        return (\r\n          <Checkbox\r\n            key={location}\r\n            occurrences={occurrence}\r\n            locations={location}\r\n            checked={(e) => this.onChangeHandler(e)}\r\n            checkedItems={this.state.checkedItems}\r\n          />\r\n        );\r\n      }\r\n    );\r\n    return (\r\n      <div className={classes.Container}>\r\n        <h3>Filter by location</h3>\r\n        <div className={classes.Checkboxes}>{checkboxes}</div>\r\n        <h2>Job results</h2>\r\n        <Jobs jobs={this.props.data} filtered={this.state.filteredItems} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Checkboxes;\r\n","import React, { Component } from \"react\";\r\nimport data from \"./utils/data/jobs-data.json\";\r\nimport Checkboxes from \"./containers/Checkboxes/Checkboxes\";\r\nimport classes from \"./App.module.css\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    data,\r\n  };\r\n\r\n  countOccurrences = (array) => {\r\n    const countOccurrences = array.reduce((acc, curr) => {\r\n      if (typeof acc[curr] == \"undefined\") {\r\n        acc[curr] = 1;\r\n      } else {\r\n        acc[curr] += 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n    return countOccurrences;\r\n  };\r\n  render() {\r\n    const newArr = [];\r\n    this.state.data.map((el) => {\r\n      newArr.push(el[\"location\"]);\r\n    });\r\n    const occurrences = this.countOccurrences(newArr);\r\n    return (\r\n      <div>\r\n        <div className={classes.Last1}>\r\n          <div className={classes.Last2}>\r\n            <div className={classes.Background}></div>\r\n            <div className={classes.Container}>\r\n              <h1>Jobs</h1>\r\n              <Checkboxes occurrences={occurrences} data={this.state.data} />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}